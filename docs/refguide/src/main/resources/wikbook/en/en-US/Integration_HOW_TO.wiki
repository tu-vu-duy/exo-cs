
{note}
Work in progress
{note}


h1. How to deploy CS to an existing Portal ?

We are introducing two ways to integrate CS with an existing portal:








h2. Integrating from binaries
If you don't want to build CS from sources you can simply get the binaries and integrate to your existing portal installation. This is a *20 minutes* HOW TO.

h3. Prerequisites

* ECM DMS Tutorial
* Download CS
* Ensure binary compatibility by looking at the following matrices :
** [ECM Dependencies|DMS:Dependencies]
** [CS Dependencies|CS:Dependencies]

{info}
The following instructions have been validated for deploying CS 1.2 within ECM 2.2 on tomcat. The steps should be very similar in other cases. [Let us know|http://forums.exoplatform.com], if you encounter problems with a different scenario.
{info}

h3. Deploy CS artifacts
- Copy war files from CS to {{.../webapp}} in ECM :
-- contact.war
-- calendar.war
-- mail.war
-- csResources.war
-- content.war
-- cometd.war

- Copy jar files from CS to {{../lib}} in ECM :
-- exo.cs.web.webservice-1.2-RC1.jar
-- exo.cs.eXoApplication.calendar.service-1.2-RC1.jar
-- exo.cs.eXoApplication.contact.service-1.2-RC1.jar
-- exo.cs.eXoApplication.content.service-1.2-RC1.jar
-- exo.cs.eXoApplication.mail.service-1.2-RC1.jar

- Copy eXo dependencies
-- exo.ws.frameworks.json-1.3.jar
-- exo.ws.frameworks.cometd.service-1.3.1.jar
-- jetty-util-6.1.11.jar
-- cometd-api-0.9.20080221.jar
-- cometd-bayeux-6.1.11.jar

- Copy 3rd party dependencies
-- jdom-1.0.jar
-- ical4j-1.0-beta5.jar
-- rome-0.9.jar
-- mail-1.4.1.jar
-- jpim-0.1-1.0.jar

{info}
In case you encounter existing jars with a different version, just keep the newer
{info}

h3. Add CS configuration
- Copy CS folder from {{.../webapp/portal.war!/WEB-INF/conf}} in CS to the same place in ECM
- Import CS configuration into {{.../webapp/portal.war!/WEB-INF/conf/configuration.xml}} in ECM
{code: xml}
  <import>war:/conf/cs/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/cs/cs-plugins-configuration.xml</import>
  <import>war:/conf/cs/rssreader-configuration.xml</import>
{code}

1.1.1 Edit Portal configuration

You may want to add a page for each application and add those pages in your navigation. For example, to add the apps to the classic portal public pages, you would proceed like this :

    * Add pages in WEB-INF/conf/portal/group/platform/users/navigation.xml
{code:xml}
 <owner-type>group</owner-type>
	<owner-id>platform/users</owner-id>
	<priority>2</priority>
  <description>collaboration demo users navigation</description>

  <page-nodes>  	
	    <node>
		    <uri>contact</uri>
		    <name>contact</name>
		    <label>#{platform.users.collaboration.contact}</label>
		    <page-reference>group::platform/users::contact</page-reference>
	  	</node>
	  	
	  	<node>
		    <uri>mail</uri>
		    <name>mail</name>
		    <label>#{platform.users.collaboration.mail}</label>
		    <page-reference>group::platform/users::mail</page-reference>
	  	</node>
	  	
	  	<node>
		    <uri>calendar</uri>
		    <name>calendar</name>
		    <label>#{platform.users.collaboration.calendar}</label>
		    <page-reference>group::platform/users::calendar</page-reference>
	  	</node>	
	  <node>
		    <uri>sitemap</uri>
		    <name>sitemap</name>
		    <label>#{platform.users.sitemap}</label>
		    <page-reference>group::platform/users::sitemap</page-reference>
	  	</node>
  </page-nodes>
{code}

    * Add pages in WEB-INF/conf/portal/group/platform/users/pages.xml
{code:xml}
 <page>
 		<page-id>group::platform/users::mail</page-id>
  	<owner-type>group</owner-type>
    <owner-id>platform/users</owner-id>
    <name>mail</name>
    <access-permissions>*:/platform/users</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>

    <application>
      <instance-id>group#platform/users:/mail/MailPortlet/mail</instance-id>
      <title>Mail Portlet</title>
      <show-info-bar>false</show-info-bar>
    </application>
  </page>

  <page>
  	<page-id>group::platform/users::calendar</page-id>
  	<owner-type>group</owner-type>
    <owner-id>platform/users</owner-id>
    <name>calendar</name>
    <access-permissions>*:/platform/users</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>

    <application>
      <instance-id>group#platform/users:/calendar/CalendarPortlet/calendars</instance-id>
      <title>Calendar Portlet</title>
      <show-info-bar>false</show-info-bar>
    </application>
  </page>

  <page>
  	<page-id>group::platform/users::contact</page-id>
  	<owner-type>group</owner-type>
    <owner-id>platform/users</owner-id>
    <name>contact</name>
    <access-permissions>*:/platform/users</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>

    <application>
      <instance-id>group#platform/users:/contact/ContactPortlet/contact</instance-id>
      <title>Contact Portlet</title>
      <show-info-bar>false</show-info-bar>
    </application>
  </page>
{code}


1.1.1 Install CS applications

Use the application registry to import CS applications and configure page you would like.
These portal tutorial can help you :
- [Portal.Import Portlets and Gadgets]
- [Portal.Page Creation Wizard]

[http://wiki.exoplatform.org/xwiki/bin/download/CS/Integration+HOW+TO/createpagemail.swf]







1.1 Integrate from sources

If you have a custom product built from eXo sources, you may want to add CS applications to your product.

1.1.1 Prerequisites
The idea here is to use [Main.ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild encironment. Read [Main.Building from sources] to learn how to setup  eXoBuild.

#info("The CS version used for this tutorial is 1.2RC1, but will work for 1.0 similarly")


1.1.1 Update product build

You need to add the following CS artifacts in your product exbuild descriptors :
- calendar.war
- contact.war
- content.war
- csResources.war
- exo.cs.eXoApplication.calendar.service-1.2RC1.jar
- exo.cs.eXoApplication.content.service-1.2RC1.jar
- exo.cs.eXoApplication.mail.service-1.2RC1.jar
- exo.cs.eXoApplication.contact.service-1.2RC1.jar
- exo.cs.web.webservice-1.2RC1.jar

In tools project, add to your <tt>modules/XXX/YYY/module.js</tt> file, where <tt>XXX</tt> is your project and <tt>YYY</tt> the
version the following:

{code:js}
eXo.require("eXo.projects.Module") ;
eXo.require("eXo.projects.Product") ;

function getModule(params) {

  var kernel = params.kernel;
  var core = params.core;
  var eXoPortletContainer = params.eXoPortletContainer;
  var jcr = params.eXoJcr;
  var portal = params.portal;
  var ws = params.ws;
  var module = new Module();

  module.version =  "1.2-RC1" ;
  module.relativeMavenRepo =  "org/exoplatform/cs" ;
  module.relativeSRCRepo =  "cs/tags/1.2RC1" ;
  module.name = "cs" ;

  module.eXoApplication = {};
  module.eXoApplication.mail =
    new Project("org.exoplatform.cs", "exo.cs.eXoApplication.mail.webapp", "war", module.version).
    addDependency(new Project("javax.mail", "mail", "jar", "1.4.1")).
    addDependency(new Project("org.exoplatform.cs", "exo.cs.eXoApplication.mail.service", "jar",  module.version));
  module.eXoApplication.mail.deployName = "mail";

  module.eXoApplication.calendar =
    new Project("org.exoplatform.cs", "exo.cs.eXoApplication.calendar.webapp", "war", module.version).
      addDependency(new Project("org.exoplatform.cs", "exo.cs.eXoApplication.calendar.service", "jar",  module.version)).
	  addDependency(new Project("org.exoplatform.ws", "exo.ws.frameworks.json", "jar", 1.3)).
	  addDependency(ws.frameworks.cometd).
	  addDependency(new Project("rome", "rome", "jar", "0.8")).
	  addDependency(new Project("jdom", "jdom", "jar", "1.0")).
      addDependency(new Project("ical4j", "ical4j", "jar", "1.0-beta5")) ;
  module.eXoApplication.calendar.deployName = "calendar";

  module.eXoApplication.contact =
    new Project("org.exoplatform.cs", "exo.cs.eXoApplication.contact.webapp", "war", module.version).
      addDependency(new Project("org.exoplatform.cs", "exo.cs.eXoApplication.contact.service", "jar",  module.version)).
      addDependency(new Project("net.wimpi.pim", "jpim-0.1", "jar",  "1.0"));
  module.eXoApplication.contact.deployName = "contact";

  module.eXoApplication.content =
    new Project("org.exoplatform.cs", "exo.cs.eXoApplication.content.webapp", "war", module.version).
      addDependency(new Project("org.exoplatform.cs", "exo.cs.eXoApplication.content.service", "jar",  module.version));
  module.eXoApplication.content.deployName = "content";

  module.web = {}
  module.web.webservice =
    new Project("org.exoplatform.cs", "exo.cs.web.webservice", "jar",  module.version);
  module.web.csResources =
    new Project("org.exoplatform.cs", "exo.cs.web.csResources", "war", module.version) ;


  return module;
}

{code}


Then declare deployment dependencies to your product assembly descriptor {{products/XXX/YYY.js}}

{code:js}
  var cs = Module.GetModule("cs/tags/1.2RC1", {kernel : kernel, ws : ws, core : core, eXoPortletContainer : eXoPortletContainer, eXoJcr : eXoJcr, portal : portal});

  product.addDependencies(cs.eXoApplication.mail) ;
  product.addDependencies(cs.eXoApplication.calendar) ;
  product.addDependencies(cs.eXoApplication.contact) ;
  product.addDependencies(cs.eXoApplication.content) ;

  product.addDependencies(cs.web.webservice) ;
  product.addDependencies(cs.web.csResources) ;
  product.addDependencies(cs.web.csportal) ;

  product.removeDependency(new Project("javax.mail", "mail", "jar", "1.4"));
{code}
 *  Notice : why need to "removeDependency(new Project("javax.mail", "mail", "jar", "1.4"))" ? Here from 1.2.x version of cs we update the java mail version from 1.4 to 1.4.1. By default kernel will deploy the 1.4, so cs deploy 1.4.1 and remove the 1.4 to avoid duplicate.

1.1.1 Adjust your pom
To make sure CS product is compiled with your project, add the following to your project's <tt>pom.xml</tt> :

{code:xml}

  <profiles>
    <profile>
      <id>default</id>
      <activation>
        <property><name>default</name></property>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        "<org.exoplatform.cs.version>1.2RC1</org.exoplatform.cs.version>"
      </properties>
    </profile>
{code}


h3. Add CS configuration

- Copy CS configuration files to your portal project's {{WEB-INF}} folder.

Copy the CS folder from {{ cs/tags/1.2RC1/web/csportal/src/main/webapp/WEB-INF/conf/cs}} to {{XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/cs}}

- Import CS configuration files in {{WEB-INF/conf/configuration.xml}} :
{code:xml}
  <import>war:/conf/cs/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/cs/cs-plugins-configuration.xml</import>
  <import>war:/conf/cs/rssreader-configuration.xml</import>
{code}


1.1.1 Edit Portal configuration
The steps are the same as for [binary integration_#HEditPortalconfiguration] but directly under <tt>XXX/YYY/web/portal/src/main/webapp/</tt>.



1.1.1 Build and deploy

{code}exobuild -product=cs -version=YYY -update -build --deploy{code}

Now start from {{exo-tomcat/bin}}




