
h1. CS Migration from 1.0 to 1.2



{note}
TODO: how to upgrade CS (1.0 to 1.1, 1.2) - in progress
{note}

This tool migrates data and structures for applications
h2. Migration procedure for tomcat
(Missing)

h2. Migration procedure for jboss

1) Prepare .sar

1.1) Preparation on prod server before deploying the new version

- replace the  -nodetypes.xml in service jar for forum and calendar
- deploy these jars in replacement to those on server (make a backup copy of the old ones)

- Adjust paths in phase1-configuration.xml
- Copy it into 02Portal.war/WEB-INF/conf/

- Edit 02Portal.war/WEB-INF/conf/configuration.xml
and add   <import>war:/conf/phase1-configuration.xml</import>
just after   <import>war:/conf/jcr/jcr-configuration.xml</import>

- Copy exo.cs.migration.tool.jar into exoplatform.sar

1.2) preparation of exoplatform.sar 2.2

- Adjust paths in phase2-configuration.xml
- Copy it into 02Portal.war/WEB-INF/conf/

- Edit 02Portal.war/WEB-INF/conf/configuration.xml
and add   <import>war:/conf/phase2-configuration.xml</import>
just after  <import>war:/conf/jcr/jcr-configuration.xml</import>

- Copy exo.cs.migration.tool.jar into exoplatform.sar

2) Phase 1 : export and nodetypes update

- Stop and restart server
- Comment import of phase1-configuration.xml in configuration.xml
- Restart server : 'relaxed' nodetypes are registered


3) Phase 2 : import and migration of data, official nodetypes restoration

- Stop server
- Deploy exoplatform.sar 2.2 prepared in 1.2 : data is corrected
- Stop server
- Comment import of phase2-configuration.xml in configuration.xml
- Restart server : official nodetypes are loaded

h3. CS version update instruction
* first thing first is you have to be sure that you
* Calendar version update
** Node type change property name
*** *exo:reminder* replace property *exo:owner* by *exo:creator*
*** configuration
{code:xml}

{code}

* Mail version update
** Note type add new properties
*** *exo:account* add 2 properties *exo:checkAll* and *exo:checkFromDate*
*** *exo:message* add property *exo:isRoot*
*** configuration
{code:xml}

{code}


h3. Data migration plug-in

UpdateCalendarVersion class use to update and migration data when update version form 1.0 to 1.1

{code}

{code}
This plug-in will prepare data and replace needed node types, update properties and replace values for changed data
[jcr 1:11 ] or later support re-register node type




h2. Architecture

CS applications are [Portal:WebUI] portlets running on top of [eXo Portal|Portal:WebHome] and leverage the eXo Platform's technology such as [JCR|JCR:WebHome], [REST framework|WS:REST Framework] and [WS:Cometd].

Learn more on this on our [Architecture] page.

h2. Implementation specificities
h3. Use of JCR Pagination in CS

Current, there are 2 ways for pagination : Storage list objects and storage query.

*Storage list objects* : when the user select a page, we get a sub list from list objects to return the current list objects. This way we don't need query again to get objects .

Advantages : Don't need to query again from JCR when selecting a page.
Disadvantages : If the data quite is large getting all objects at the same time is very slow so that the browser could slow down. Besides, when selecting a page, the objects in the list are not renewed if they are changed outside.

*Storage query* : We don't keep list objects, so when the user selects a page, we query again from JCR to get NodeIterator and to populate the current page from it.

Advantages : Only get objects in current page.
Disadvantages : We must query data again from JCR when selecting a page because of NodeIterator only one dimension.
the contact application use both two ways for storage: Storage query when select a address book and storage list objects when select a tag.

So, *to be more efficient* we will implement a NodeIterator that can access _forward_ and _previous_.









