h1.eXo Chatserver Configuration {anchor:id=CSref.Configuration.eXoChatserverConfiguration}

h2.  Openfire Configuration {anchor:id=CSref.Configuration.OpenfireConfiguration}

eXo Collaboration chat services is a Jabber engine powered by Openfire . eXo will delegate the actual Jabber protocol communication to Openfire.

You have full latitude to configure Openfire. There are two possible ways do it:

the admin console: http://localhost:9090/
the openfire.xml file, in $openfire_home/conf/


h3. Configuration in Openfire.xml {anchor:id=CSref.Configuration.ConfigurationinOpenfirexml}

The Openfire server has a single configuration file called openfire.xml and located under exo-openfire/conf directory. Configuration is based on properties expressed in an XML syntax. For example, to set property prop.name.is.blah=value, you would write this xml snippet :

{code:xml}
<prop>
  <name>
                <is>
                    <blah>value</blah>
                </is>
  </name>
</prop>
{code}
Openfire has an extensive list of configuration properties. You can read a list of all properties on this page: http://www.igniterealtime.org/community/docs/DOC-1061

h3. eXo specific configuration {anchor:id=CSref.Configuration.eXospecificConfiguration}

eXo Collaboration bundle comes with a pre-configured openfire server. It is bundled with some eXo plugins and configurations that allow connectivity with eXo. The key properties for integration are :

* {{*provider.auth.className*}} : An implementation of the AuthProvider interface for authentication of users on the chat server

* {{*provider.users.className*}} : An implementation of the UserProvider interface to which openfire will delegate users management

* {{*provider.groups.className*}} : An implementation of the GroupProvider interface to which openfire will delegate groups management

eXo provides implementations for these 3 interfaces with ExoAuthProvider, ExoUserProvider, ExoGroupProvider. These implementations are based on eXo REST framework and let you configure the endpoints within the openfire.xml file with additional properties :
|| Property || Description || Default value ||
|*eXo.env.serverBaseURL*|It is the base URL of the server. | {{http://localhost:8080/}}|
|*eXo.env.restContextName*| It is the context name of REST Web application . | rest|
| *provider.authorizedUser.name*| username to authenticate to access the HTTP REST service|{{root}}|
| *provider.authorizedUser.password* | password matching with provider.authorizeduser.name | {{gtn}} |
| *exoAuthProvider.authenticationURL* | URL to authenticate users | {{/organization/authenticate/}} |
| *exoAuthProvider.authenticationMethod* | HTTP method used for authentication method | {{POST}} |
| *exoUserProvider.findUsersURL* | URL to find all users | {{/organization/xml/user/find-all/}} |
| *exoUserProvider.findUsersMethod* | HTTP method used to find all users in the system | {{GET}} |
| *exoUserProvider.getUsersURL* | URL to retrieve a range of users}} | {{/organization/xml/user/view-range/}} |
| *exoUserProvider.getUsersMethod* | HTTP method  used for user/view-range}} | {{GET}} |
| *exoUserProvider.usersCountURL* | URL to count the number of users | {{/organization/xml/user/count}} |
| *exoUserProvider.usersCountMethod* | HTTP method used to count the number of users | {{GET}} |
| *exoUserProvider.userInfoURL* | URL to get the information of users| {{/organization/xml/user/info/}} |
| *exoUserProvider.userInfoMethod* | HTTP method used to get the information of users | {{GET}} |
| *exoGroupProvider.groupInfoURL* | URL to get the information of a user group | {{/organization/xml/group/info/}} |
| *exoGroupProvider.groupInfoMethod*| HTTP method used to get the information of a user group | {{GET}} |
| *exoGroupProvider.getGroupsAllURL* | URL to view a list of all user groups | {{/organization/xml/group/view-all/}} |
| *exoGroupProvider.getGroupsAllMethod* | HTTP method used to view a list of all user groups | {{GET}} |
| *exoGroupProvider.getGroupsRangeURL* | URL to list groups in a specific range| {{/organization/xml/group/view-from-to/}} |
| *exoGroupProvider.getGroupsRangeMethod* | HTTP method used to list groups in a specific range | {{GET}} |
| *exoGroupProvider.getGroupsForUserURL* | URL to list  groups to which a user belongs | {{/organization/xml/group/groups-for-user/}} |
| *exoGroupProvider.getGroupsForUserMethod* | HTTP method used to list groups to which a user belongs | {{GET}} |
| *exoGroupProvider.groupsCountURL* | URL to count the number of groups | {{/organization/xml/group/count}} |
| *exoGroupProvider.groupsCountMethod* | HTTP method used to count the number of groups | {{GET}} |


As you can see, the default settings will only work if eXo is deployed on the same host as openfire, on port 8080.

{note}
_restContextName_ is used to specify Openfire server  that is dedicated for the portal. If _eXo.env.restContextName_ system property exists, it will override this value.

_eXo.env.restContextName_ system property can be set by specifying the {{{ -D }}} option to the java command when running Openfire. 

Example: 
- If Openfire server is dedicated for the portal named "portal", the command will have  the following format : 

_{{{ java -DeXo.env.restContextName=rest -jar ../lib/startup.jar }}}_. 

- If Openfire server is dedicated for the portal named "csdemo", the command will have following format: 

_{{{ java -DeXo.env.restContextName=rest-csdemo -jar ../lib/startup.jar.}}}_

By default, Openfire server is dedicated to the portal named "portal"
{note}

h2. System Configuration {anchor:id=CSref.Configuration.SystemConfiguration}
Openfire makes use of several ports for communication.
|| Interface || Port || Type || Description ||
| *All addresses* | {{5222}} | {{Client to Server}} | The standard port for clients is to connect to the server. Connection may or may not be encrypted. You can update the security settings for this port. |
| *All addresses* | {{9090 & 9091}} | {{Admin Console}} | The port used for respectively the unsecured and secured Openfire Admin Console access. |
| *All addresses* | {{7777}} | {{File Transfer Proxy}} | The port used for the proxy service that allows file transfers to occur between two entities on the XMPP network.|
| *All addresses* | {{3478 & 3479}} | {{STUN Service}} | The port used for the service that ensures connectivity between entities when behind a NAT.|

You can view the table above in _http://hostname:9090/index.jsp_ after you are logged in to openfire's web console and also customize those ports by yourself.

h2. AS configuration {anchor:id=CSref.Configuration.ASConfiguration}
To enable propagation of identity across the chat webapp, it is required that you enable the SSO valve on Tomcat-based Application server.

* For jboss server, edit _jboss/server/default/deploy/jboss-web.deployer/server.xml_

* For tomcat server, edit _tomcat/conf/server.xml_
The valve should already be there, you just need to uncomment it if it is not already done.

{code:xml}
<Valve className="org.apache.catalina.authenticator.SingleSignOn" />
{code}

In the case of cluster deployment, you may want to use {{ClusteredSingleSignOn}} instead.

{code:xml}
<Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn" />
{code}


