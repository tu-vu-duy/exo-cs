h1. Components in eXo Collaboration Configuration {anchor:id=CSref.Configuration.ComponentsineXoCollaborationConfiguration}
This table shows some main components that take init-param in the applications of eXo Collaboration:

|| Applications|| Components || Description ||
| *Calendar* | {{CalendarServiceImpl}} | It is a service that manages calendars in the Calendar application of eXo Collaboration|
| *Chat* | {{HistoryImpl}}  {example}{example}{example}{example} {{XMPPMessenger}} {example}{example}{example}{example}  {{DefaultPresenceStatus}}| It is a service that saves the chat history of users {example}{example} It is a service that processes messages of chat users, basing on the XMPP Protocol  {example}{example}  It is a component that controls the presence status of chat users.|
|*Contact* | {{ContactServiceImpl}} | It is a service that supplies functions to manage contacts in the Address Book application of eXo Collaboration |
| *Webservice* | {{AddActionsPlugin}} | It is used to register a listener for the actions on the nodes |


h2. CalendarService {anchor:id=CSref.Configuration.CalendarService}
The configuration of the Calendar application is applied mainly in _/eXoApplication/calendar/service/src/main/resources/conf/portal/configuration.xml_ 
Use the _CalendarService_ to configure the Calendar. The following information will explain details of its configuration.
When this configuration file is executed, the component named _org.exoplatform.calendar.service.impl.CalendarServiceImpl_ will process the actions of the Calendar application.

{code:xml}
<component>
  <key>org.exoplatform.calendar.service.CalendarService</key>
  <type>org.exoplatform.calendar.service.impl.CalendarServiceImpl</type>
  <init-params>
    <properties-param>
      <name>eventNumber.info</name>
      <property name="eventNumber" value="100" />
    </properties-param>
  </init-params>
</component>
{code}

Details:
||Properties-Param || Property name || Possible Value || Default Value || Description ||
| *eventNumber* | {{eventNumber}} | {{interger}} | {{100}} | The number of events in a calendar |

h2. HistoryImpl {anchor:id=CSref.Configuration.HistoryImpl}
The configuration of historyImpl is found in the  _/extension/webapp/src/main/webapp/WEB-INF/cs-extension/cs/chat/chat-service-configuration.xml_
When this configuration file is executed, the component named _org.exoplatform.services.xmpp.history.impl.jcr.HistoryImpl_ initializes all the configured parameters.

{code:xml}
<component>
  <type>org.exoplatform.services.xmpp.history.impl.jcr.HistoryImpl</type>
  <init-params>
    <value-param>
      <name>workspace</name>
      <value>collaboration</value>
    </value-param>
    <value-param>
      <name>repository</name>
      <value>repository</value>
    </value-param>
    <value-param>
      <name>path</name>
      <value>exo:applications/eXoChat/history</value>
    </value-param>
  </init-params>
</component>
{code}

Details:
||Value-Param || Possible Values || Default Value ||  Description ||
| *workspace* |  {{string}} | {{collaboration}} | Workspace is the workspace name in JCR where history data is stored. |
|*repository*|  {{string}} | {{repository}} | Repository is the repository name in JCR where history data is stored |
|*path*| {{string}} | {{exo:applications/eXoChat/history}} | Path is JCR path to the location where history data is stored. |


h2. XMPPMessenger {anchor:id=CSref.Configuration.XMPPMessenger}
The configuration of the _XMPPMessenger_ component is found in _/extension/webapp/src/main/webapp/WEB-INF/cs-extension/cs/chat/chat-service-configuration.xml_.
It helps eXo Collaboration connect the Openfire instance.

{code:xml}
<component>
  <type>org.exoplatform.services.xmpp.connection.impl.XMPPMessenger</type>
  <init-params>
    <properties-param>
      <name>openfire-connection-conf</name>
      <property name="host" value="127.0.0.1" />
      <property name="port" value="5222" />
    </properties-param>
    <properties-param>
      <name>send-file</name>
      <property name="timeout" value="7200000" />
    </properties-param>
  </init-params>
</component>
{code}

Details: 
||Properties-param || Property name || Possible Values || Default Value || Description ||
| *openfire-connection-conf* | {{host}}  {example}{example} {{port}}|  {{integer}} {example}{example} {{integer}} | {{127.0.0.1}} {example}{example} {{5222}} | IP address or hostname for the openfire server {example}{example}  Port to connect to on the openfire server. Should be the same that set in openfire configuration "Client to Server" |
| *send-file*| {{timeout}} | {{integer}} | {{7200000}} | timeout before aborting attempt to establish a file transfer |


h2. DefaultPresenceStatus {anchor:id=CSref.Configuration.DefaultPresenceStatus}
The configuration of the _DefaultPresenceStatus_ component is found in _/extension/webapp/src/main/webapp/WEB-INF/cs-extension/cs/chat/chat-service-configuration.xml_.

{code:xml}
<component>
  <type>org.exoplatform.services.presence.DefaultPresenceStatus</type>
  <init-params>
    <properties-param>
      <name>presence-status</name>
      <property name="mode" value="Free to chat" />
    </properties-param>
  </init-params>
</component>
{code}

Details:
|| Properties-param || Property name|| Possible Values || Default Value || Description || 
| *presence-status* | {{mode}} | {{string}} | {{Free to chat}} | It shows the present status of users | 


h2. ContactService {anchor:id=CSref.Configuration.ContactService}
The configuration of the _ContactService_ component is found in _eXoApplication/contact/service/src/main/resources/conf/portal/configuration.xml_
when the server starts, the configuration file that contains the declaration of _ContactService_ component is executed, after that a _ContactService_ component is created with params and plug-ins in the configuration file.

{code:xml}
<component>
  <key>org.exoplatform.contact.service.ContactService</key>
  <type>org.exoplatform.contact.service.impl.ContactServiceImpl</type>
  <init-params>
    <values-param>
      <name>UserCanSeeAllGroupAddressBooks</name>
      <description>User can see all GroupAddressBooks or only GroupAddressBooks that the user has at least one membership</description>
      <value>false</value>
    </values-param>
    <values-param>
      <name>NonPublicGroups</name>
      <description>Groups that should not be displayed in broadcast list. Wildcards may be used in groups name</description>
    </values-param>
  </init-params>
</component>
{code}

|| Values-param || Possible Values || Default Value || Description ||
| *UserCanSeeAllGroupAddressBooks* | {{true/false}} | {{false}} | User can see all _GroupAddressBooks_ or only _GroupAddressBooks_ that the user has at least one membership. | 
| *NonPublicGroups* | {{true/false}} | N/A | Groups that should not be displayed in broadcast list. Wildcards may be used in groups name. |


