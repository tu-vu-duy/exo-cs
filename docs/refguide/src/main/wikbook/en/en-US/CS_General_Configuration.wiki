h1. CS Configuration



h1. Overview

CS configuration takes place mainly in WEB-INF/conf/cs/cs-plugins-configuration.xml. The configuration details in this article are valid for all components of CS.

h1. Data Storage

As usual, CS applications and user data are stored in JCR.
The default workspace configuration that come with the CS bundle is slightly different to what you may see in basic portal configuration.
CS uses a [Content Addressable Storage|http://wiki.exoplatform.com/xwiki/bin/view/JCR/External+Value+Storages{HContentAddressableValuestorage28CAS29support] to optimize the emails storage.



{code}
<value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.CASableTreeFileValueStorage">
  <properties>
   <property name="path" value="target/temp/values/ws"/>
   <property name="digest-algo" value="MD5"/>
   <property name="vcas-type" value="org.exoplatform.services.jcr.impl.storage.value.cas.JDBCValueContentAddressStorageImpl"/>
   <property name="jdbc-source-name" value="jdbcexo"/>
   <property name="jdbc-dialect" value="hsqldb"/>
  </properties>
  <filters>
   <filter property-type="Binary"/>
  </filters>
</value-storage>
{code}

# helps to save disk space by storing a single file for identical workspace binary values. However it has a higher cost in CPU while values are written. If you prefer to favor CPU over disk space, you should configure a  classical TreeFileValue Storage :
{code}
<value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
  <properties>
    <property name="path" value="../temp/values/collaboration"/>
    <property name="jdbc-source-name" value="jdbcexo"/>
    <property name="jdbc-dialect" value="hsqldb"/>
  </properties>
  <filters>
   <filter property-type="Binary"/>
  </filters>
</value-storage>
{code}


#info}
General configuration of datasources and JCR for the portal is covered in this tutorial : [Portal:Database Configuration]
{HContentAddressableValuestorage28CAS29support] to optimize the emails storage.



{code}
<value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.CASableTreeFileValueStorage">
  <properties>
   <property name="path" value="target/temp/values/ws"/>
   <property name="digest-algo" value="MD5"/>
   <property name="vcas-type" value="org.exoplatform.services.jcr.impl.storage.value.cas.JDBCValueContentAddressStorageImpl"/>
   <property name="jdbc-source-name" value="jdbcexo"/>
   <property name="jdbc-dialect" value="hsqldb"/>
  </properties>
  <filters>
   <filter property-type="Binary"/>
  </filters>
</value-storage>
{code}

# helps to save disk space by storing a single file for identical workspace binary values. However it has a higher cost in CPU while values are written. If you prefer to favor CPU over disk space, you should configure a  classical TreeFileValue Storage :
{code}
<value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
  <properties>
    <property name="path" value="../temp/values/collaboration"/>
    <property name="jdbc-source-name" value="jdbcexo"/>
    <property name="jdbc-dialect" value="hsqldb"/>
  </properties>
  <filters>
   <filter property-type="Binary"/>
  </filters>
</value-storage>
{code}


#info}



h1. Notifications and Emails
By default we will use email configuration to send email notification and invitation to take part in an event

h2. For 1.3.x version
{code:xml}
<component>
     <key>org.exoplatform.services.mail.MailService</key>
     <type>org.exoplatform.services.mail.impl.MailServiceImpl</type>
     <init-params>
	 <properties-param>
	      <name>config</name>
	      <property name="mail.smtp.auth.username" value="%smtp_user_id%" />
	      <property name="mail.smtp.auth.password" value="%smtp_user_password%" />
	      <property name="mail.smtp.host" value="%smtp_server%" />
	      <property name="mail.smtp.port" value="smtp_port" />
	      <property name="mail.smtp.starttls.enable" value="true" />
	      <property name="mail.smtp.auth" value="true" />
	      <property name="mail.smtp.debug" value="false" />
	      <property name="mail.smtp.socketFactory.port" value="smtp_port" />
	      <property name="mail.smtp.socketFactory.class" value="javax.net.ssl.SSLSocketFactory" />
	      <property name="mail.smtp.socketFactory.fallback" value="false" />
	  </properties-param>
      </init-params>
</component>
{code}

1.1 For 2.0 version
#info("Since cs 2.0 we move this configuration to gatein/conf/configuration.properties")
{code}
...
# EMail
gatein.email.smtp.username=smtp_user_id
gatein.email.smtp.password=smtp_user_password
gatein.email.smtp.host=smtp_server
gatein.email.smtp.port=smtp_port
gatein.email.smtp.starttls.enable=true
gatein.email.smtp.auth=true
gatein.email.smtp.socketFactory.port=smtp_port
gatein.email.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
{code}


1 Auto update rss and caldav feeds
#info("Since cs 1.3 we have plug-in to run automatically generate rss and caldav feeds")

The plug-in configuration is applied in *WEB-INF/conf/cs/cs-plugins-configuration.xml*.
The following information will explain details of configuration.

When cs-plugins-configuration.xml file is executed, the component-plugin named *RssRecordsJob* will be referred to org.exoplatform.calendar.service.AutoGeneratePeriodJob to update rss, caldav data.

{code}
......
<component-plugin>
      <name>RssRecordsJob</name>
      <set-method>addPeriodJob</set-method>
      <type>org.exoplatform.calendar.service.AutoGeneratePeriodJob</type>
      <description>add auto update rss, caldav job to the JobSchedulerService</description>
      <init-params>
        <properties-param>
          <name>job.info</name>
          <description>save the monitor data  periodically</description>
          <property name="jobName" value="UpdateRssCaldavJob"/>
          <property name="groupName" value="CollaborationSuite"/>
          <property name="job" value="org.exoplatform.calendar.service.AutoGeneratePeriodJobImp"/>
          <property name="repeatCount" value="0"/>
          <property name="period" value="180000"/>
          <property name="startTime" value="+0"/>
          <property name="endTime" value=""/>
        </properties-param>
        <properties-param>
          <name>autogenerate.info</name>
          <description>save the monitor data  periodically</description>
          <property name="portalName" value="portal"/>
          <property name="event_number" value="100"/>
        </properties-param>
      </init-params>
    </component-plugin>
......
{code}

Explanation:

* *RssRecordsJob*: unique key to avoid duplicate names.

* *addPeriodJob*: a method to create job.

* *org.exoplatform.calendar.service.AutoGeneratePeriodJob*: The object defines Calendar Service .

h1. See also

- [CS:CS Integration into an Existing Portal]
- [CS:CS Migration from 1-0 to 1-2]





