h1. eXo Chat Server configuration





h1. Openfire Configuration

eXo CS 1.3 chat services is a Jabber engine powered by [Openfire|http://www.igniterealtime.org/projects/openfire/index.jsp].
eXo will delegate the actual Jabber protocol communication to Openfire.

{note}
CS 1.3 has been tested only with Openfire 3.4.5. Should you try to upgrade yourself, this would be at your own risks
{note}

You have full latitude to configure Openfire. There are two possible ways do it :

* the admin console : http://localhost:9090/
* the openfire.xml file, in $openfire_home/conf/


{note}
CS 2.0 has been updated with Openfire 3.6.4. You need to notice more about configuration in openfire.xml file, refer [here |http://wiki.exoplatform.org/xwiki/bin/view/CS/Chat+Configuration#eXo addition configuration] for more information
{note}


h2. Configuring openfire.xml

The Openfire server has a single configuration file called openfire.xml and located under exo-openfire/conf directory.
Configuration is based on properties expressed in an XML syntax. For example, to set property _prop.name.is.blah=value_, you would write this xml snippet :
{code}
<prop><name><is><blah>value</blah></is></name></prop>
{code}


Openfire has an extensive list of configuration properties. You can read a *list of all properties* on this page : http://www.igniterealtime.org/community/docs/DOC-1061


h2. eXo specific configuration


eXo CS bundles comes with a pre-configured openfire server. It is bundled with some eXo plugins and configurations that allow connectivity to eXo.
The key properties for integration are :
* *provider.auth.className* : An implementation of the AuthProvider interface for authentication of users on the chat server
* *provider.users.className* : An implementation of the UserProvider interface to which openfire will delegate users management
* *provider.groups.className* : An implementation of the GroupProvider interfact to which openfire will delegate groups management

eXo provides implementations for these 3 interfaces with ExoAuthProvider, ExoUserProvider, ExoGroupProvider. These implementations use eXo hosted REST services and let you configure the endpoints within the openfire.xml file with additional properties :

|| Property || Description || default value ||
| provider.authorizedUser.name | username to authenticate against the HTTP REST service | root |
| provider.authorizedUser.password | password matching with provider.authorizeduser.name | password |
|  |
| exoAuthProvider.authenticationURL | URL to authenticate users | http://127.0.0.1:8080/rest/organization/authenticate/ |
| exoAuthProvider.authenticationMethod | HTTP method used to pass parameters | POST |
|  |
| exoUserProvider.findUsersURL | URL to find all users | http://127.0.0.1:8080/rest/organization/xml/user/find-all/  |
| exoUserProvider.findUsersMethod | HTTP method for user/find-all| GET  |
| exoUserProvider.getUsersURL | URL to retrieve a range of users | http://127.0.0.1:8080/rest/organization/xml/user/view-range/ |
| exoUserProvider.getUsersMethod | HTTP method for user/view-range | GET  |
| exoUserProvider.usersCountURL | URL to count users | http://127.0.0.1:8080/rest/organization/xml/user/count/  |
| exoUserProvider.usersCountMethod | HTTP method for user/count | GET |
| exoUserProvider.userInfoURL | URL to get user info | http://127.0.0.1:8080/rest/organization/xml/user/info/  |
| exoUserProvider.userInfoMethod | HTTP method for user/info | GET  |
|  |
| exoGroupProvider.groupInfoURL | URL to get group info | http://127.0.0.1:8080/rest/organization/xml/group/info/ |
| exoGroupProvider.groupInfoMethod | HTTP method for info | GET  |
| exoGroupProvider.getGroupsAllURL | URL to view all groups | http://127.0.0.1:8080/rest/organization/xml/group/view-all/ |
| exoGroupProvider.getGroupsAllMethod | HTTP method for group/view-all | GET |
| exoGroupProvider.getGroupsRangeURL | URL to view a group range | http://127.0.0.1:8080/rest/organization/xml/group/view-from-to/ |
| exoGroupProvider.getGroupsRangeMethod | HTTP method for group/view-from-to | GET |
| exoGroupProvider.getGroupsForUserURL | URL to get groups for a user | http://127.0.0.1:8080/rest/organization/xml/group/groups-for-user/ |
| exoGroupProvider.getGroupsForUserMethod | HTTP method for groups-for-user | GET |
| exoGroupProvider.groupsCountURL | URL to count groups | http://127.0.0.1:8080/rest/organization/xml/group/count |
| exoGroupProvider.groupsCountMethod | HTTP method for group/count | GET |

As you can see, the default settings will work for a case where eXo is is deployed on the same host as openfire, on port 8080 and bound to 127.0.0.1 IP address.
This is actually the case for the quick steps given in the [Install Guide]. However, you will need to change them to accommodate your own server deployment.

h2. eXo addition configuration

{code:xml}
<env>
      <serverBaseURL>http://localhost:8080/</serverBaseURL>
      <!--
          "restContextName" is used to specify Openfire server is dedicated for which portal.
          If "eXo.env.restContextName" system property exists, it will override this value.
          "eXo.env.restContextName" system property can be set by specifying the -D option
          to the java command when running Openfire. Example: If Openfire server is dedicated for "portal" portal
          the command will have following format : java -DeXo.env.restContextName=rest -jar ../lib/startup.jar .
          If Openfire server is dedicated for "csdemo" portal, the command will have following format:
          java -DeXo.env.restContextName=rest-csdemo -jar ../lib/startup.jar .
          By default, Openfire server is dedicated to "portal" portal.
       -->
      <restContextName>rest</restContextName>
</env>

{code}




1 eXo Service Configuration
You will need to tell eXo how to connect to the openfire instance. This is achieved by configuration of the ~~XMPPMessenger~~ component found in ~~exo.cs.eXoApplication.chat.service~~.
{code}
<component>
    <type>org.exoplatform.services.xmpp.connection.impl.XMPPMessenger</type>
    <init-params>
      <properties-param>
        <name>openfire-connection-conf</name>
        <property name="host" value="127.0.0.1" />
        <property name="port" value="5222" />
      </properties-param>
...
{code}


Beside openfire-connection-conf, other properties can be configured on the XMPPMessenger. Below is the full list :

| properties-param | property name | description | default value|
|openfire-connection-conf | host | IP address or hostname for the openfire server | 127.0.0.1|
| port | port to connect to on the openfire server. Should be the same that set in openfire configuration "Client to Server" | 5222|
|send-file | timeout | timeout before aborting attempt to establish a file transfer | openfire defaults|






1 System Configuration

Openfire makes use of several ports for communication.

| Interface | Port | Type | Description | 
| All addresses | 5222 | Client to Server | The standard port for clients is to connect to the server. Connections may or may not be encrypted. You can update the security settings for this port.|
| All addresses| 9090 && 9091| | Admin Console| | The port used for respectively the unsecured and secured Openfire Admin Console access.|
| All addresses| 7777| | File Transfer Proxy| | The port used for the proxy service that allows file transfers to occur between two entities on the XMPP network.|
| All addresses| 3478 & 3479| | STUN Service| | The port used for the service that ensures connectivity between entities when behind a NAT.|

You can view above table in http://hostname:9090/index.jsp after you are logged in to openfire's web console and also customize those ports by yourself.










1 AS configuration

To unable propagation of identity across the chat webapp, it is required that you enable the SSO valve on omcat-based ASes

* For jboss server, edit jboss/\server/\default/\deploy/\jboss-web.deployer/\server.xml
* For tomcat server edit tomcat/\conf/\server.xml

The valve should already be there, you just need to uncomment it if not already done..
{code:xml}
 <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
{code}

In clustered deployment, you may want to use ClusteredSingleSignOn instead.
{code:xml}
  <Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn" />
{code}






