Index: eXoApplication/contact/webapp/src/test/java/org/exoplatform/contact/TestCalendarUtils.java
===================================================================
--- eXoApplication/contact/webapp/src/test/java/org/exoplatform/contact/TestCalendarUtils.java	(revision 0)
+++ eXoApplication/contact/webapp/src/test/java/org/exoplatform/contact/TestCalendarUtils.java	(revision 0)
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.contact;
+
+import junit.framework.TestCase;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Aug 9, 2011  
+ */
+public class TestCalendarUtils extends TestCase {
+
+  public TestCalendarUtils() {
+    super();
+  }
+
+  public void testIsValidEmailAddresses() {
+    // for value null
+    String value = null;
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value is empty
+    value = "";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value is one text
+    value = "test";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is missing extension
+    value = "test@";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is missing extension
+    value = "test@test";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is content strange characters
+    value = "test.test@test&.com";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is content strange characters
+    value = "test.test@test.com#";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is content strange characters
+    value = "test.test#ssss@test.com";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is content strange characters
+    value = "testemail[]ssss@test.com.com";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is content double @
+    value = "testemail@test@test.com";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value has last extension very long - more than 6 characters
+    value = "testemail@test.comlastlong";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value is good email address.
+    value = "test-test@test.com";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value is good email address.
+    value = "test.test@test.com";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value is good email address.
+    value = "testemail@test.com.com.com";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value has longer fist extension
+    value = "jean-christophe.lastname@adressetroplongue.fr";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value is very longer email address
+    value = "jean-christophe.lastname.long.text.more@adressetroplongue.fr";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value content some good email address
+    value = "jean@test.uk, testemail2@kkk.com, emailtest.exo@exo.com";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value content some good email address and slip by ; and ,
+    value = "jean@test.uk; testemail2@kkk.com, emailtest.exo@exo.com; testtest@test.test";
+    assertEquals(true, CalendarUtils.isValidEmailAddresses(value));
+    // for value content some email address but has email content strange characters.
+    value = "jean@test.uk, tes#temail2@kkk.com, emailtest.exo@exo.com; testtest@test.test";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value content some email address but has email missing extension.
+    value = "jean@test.uk, root@localhost, emailtest.exo@exo.com; testtest@test.test";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+    // for value content some email address but has email longer extension - more than 6 characters.
+    value = "jean@test.uk, root@localhost.localhost, emailtest.exo@exo.com; testtest@test.test";
+    assertEquals(false, CalendarUtils.isValidEmailAddresses(value));
+  }
+
+}
Index: eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/CalendarUtils.java
===================================================================
--- eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/CalendarUtils.java	(revision 72239)
+++ eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/CalendarUtils.java	(working copy)
@@ -27,6 +27,10 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 
+import javax.mail.internet.AddressException;
+import javax.mail.internet.InternetAddress;
+
+import org.apache.commons.lang.StringUtils;
 import org.exoplatform.calendar.service.Attachment;
 import org.exoplatform.calendar.service.CalendarEvent;
 import org.exoplatform.calendar.service.CalendarService;
@@ -276,20 +280,25 @@
     for(String c : regexpression){ if(name.contains(c)) return false ;}
     return true ;
   }
-  public static boolean isEmailValid(String value) {
-    String emailRegex = "[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[_A-Za-z0-9-.]+\\.[A-Za-z]{2,5}" ;
-    return (value!= null && value.trim().length() > 0 && value.trim().matches(emailRegex)) ;
-  }
-  public static boolean isAllEmailValid(String addressList) {
-    boolean isValid = true ;
-    if(CalendarUtils.isEmpty(addressList)) return false ;
-    for(String s : addressList.split(CalendarUtils.COMMA)) {
-      s = s.trim() ;
-      if(!isEmailValid(s)) isValid = false ;
-      break ;
+  
+  public static boolean isValidEmailAddresses(String value) {
+    if (isEmpty(value))
+      return true;
+    value = StringUtils.remove(value, " ");
+    value = StringUtils.replace(value, SEMICOLON, COMMA);
+    try {
+      InternetAddress[] iAdds = InternetAddress.parse(value, true);
+      String emailRegex = "[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[_A-Za-z0-9-.]+\\.[A-Za-z]{2,6}";
+      for (int i = 0; i < iAdds.length; i++) {
+        if (!iAdds[i].getAddress().matches(emailRegex))
+          return false;
+      }
+    } catch (AddressException e) {
+      return false;
     }
-    return isValid  ;
+    return true;
   }
+  
   public static Calendar getInstanceTempCalendar() { 
     Calendar  calendar = GregorianCalendar.getInstance() ;
     calendar.setLenient(false) ;
Index: eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIEventForm.java
===================================================================
--- eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIEventForm.java	(revision 72239)
+++ eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIEventForm.java	(working copy)
@@ -290,7 +290,7 @@
         errorMsg_ = "UIEventForm.msg.event-email-required" ;
         return false ;
       }
-      else if(!CalendarUtils.isAllEmailValid(getEmailAddress())) {
+      else if(!CalendarUtils.isValidEmailAddresses(getEmailAddress())) {
         errorMsg_ = "UIEventForm.msg.event-email-invalid" ;
         return false ;
       } 
Index: eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIContactForm.java
===================================================================
--- eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIContactForm.java	(revision 72239)
+++ eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIContactForm.java	(working copy)
@@ -23,6 +23,7 @@
 
 import javax.jcr.PathNotFoundException;
 
+import org.exoplatform.contact.CalendarUtils;
 import org.exoplatform.contact.ContactUtils;
 import org.exoplatform.contact.service.Contact;
 import org.exoplatform.contact.service.ContactAttachment;
@@ -233,16 +234,13 @@
         event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages()) ;
         return ;
       }*/
-      String EMAIL_REGEX = 
-        "[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[_A-Za-z0-9-.]+";
-      String emails = profileTab.getFieldEmail() ;
-      for (String email : emails.split(Utils.SEMI_COLON)) {
-        if (!ContactUtils.isEmpty(email) && (!email.trim().matches(EMAIL_REGEX) || (email.length() > 40))) {
-          uiApp.addMessage(new ApplicationMessage("UIContactForm.msg.invalid-email", null, 
-              ApplicationMessage.WARNING)) ;
-          event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages()) ;
-          return ;
-        }
+      String emails = profileTab.getFieldEmail();
+      if (!ContactUtils.isEmpty(emails))
+        emails = emails.replaceAll(CalendarUtils.SEMICOLON, CalendarUtils.COLON);
+      if (!CalendarUtils.isValidEmailAddresses(emails)) {
+        uiApp.addMessage(new ApplicationMessage("UIContactForm.msg.invalid-email", null, ApplicationMessage.WARNING));
+        event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages());
+        return;
       }
       contact.setEmailAddress(emails);
       if(profileTab.getImage() != null) {
Index: eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIComposeForm.java
===================================================================
--- eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIComposeForm.java	(revision 72239)
+++ eXoApplication/contact/webapp/src/main/java/org/exoplatform/contact/webui/popup/UIComposeForm.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.exoplatform.contact.CalendarUtils;
 import org.exoplatform.contact.ContactUtils;
 import org.exoplatform.contact.service.Contact;
 import org.exoplatform.contact.webui.UIContactPortlet;
@@ -45,9 +46,9 @@
 import org.exoplatform.webui.form.UIFormSelectBox;
 import org.exoplatform.webui.form.UIFormStringInput;
 import org.exoplatform.webui.form.UIFormTextAreaInput;
+import org.exoplatform.webui.form.UIFormInputWithActions.ActionData;
 import org.exoplatform.webui.form.wysiwyg.FCKEditorConfig;
 import org.exoplatform.webui.form.wysiwyg.UIFormWYSIWYGInput;
-import org.exoplatform.webui.form.UIFormInputWithActions.ActionData;
 
 
 /**
@@ -209,21 +210,15 @@
       UIApplication uiApp = uiForm.getAncestorOfType(UIApplication.class) ;
       String to = uiForm.getFieldToValue() ;      
       if (ContactUtils.isEmpty(to)) {
-        uiApp.addMessage(new ApplicationMessage("UIComposeForm.msg.to-field-empty", null,
-            ApplicationMessage.WARNING)) ;
-        event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages()) ;
-        return ;
+        uiApp.addMessage(new ApplicationMessage("UIComposeForm.msg.to-field-empty", null, ApplicationMessage.WARNING));
+        event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages());
+        return;
       }
-      to = to.replaceAll(";", ",") ;
-      String EMAIL_REGEX = 
-        "[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[_A-Za-z0-9-.]+";
-      for (String email : to.split(",")) {
-        if (!ContactUtils.isEmpty(email) && !email.trim().matches(EMAIL_REGEX)) {
-          uiApp.addMessage(new ApplicationMessage("UIComposeForm.msg.invalid-email", null, 
-              ApplicationMessage.WARNING)) ;
-          event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages()) ;
-          return ;
-        }
+      to = to.replaceAll(CalendarUtils.SEMICOLON, CalendarUtils.COLON);
+      if (!CalendarUtils.isValidEmailAddresses(to)) {
+        uiApp.addMessage(new ApplicationMessage("UIComposeForm.msg.invalid-email", null, ApplicationMessage.WARNING));
+        event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages());
+        return;
       }
       if (uiForm.isCSMail) {
         UIPopupAction uiChildPopup = uiForm.getAncestorOfType(UIPopupAction.class) ;
