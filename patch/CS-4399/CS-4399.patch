Index: eXoApplication/mail/service/src/test/java/org/exoplatform/mail/service/test/TestMessageFilter.java
===================================================================
--- eXoApplication/mail/service/src/test/java/org/exoplatform/mail/service/test/TestMessageFilter.java	(revision 0)
+++ eXoApplication/mail/service/src/test/java/org/exoplatform/mail/service/test/TestMessageFilter.java	(revision 0)
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2003-2010 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.mail.service.test;
+
+import java.util.Calendar;
+import org.exoplatform.commons.utils.ISO8601;
+import org.exoplatform.mail.service.MessageFilter;
+import org.exoplatform.mail.service.Utils;
+
+/**
+ * Created by The eXo Platform SAS Author : eXoPlatform exo@exoplatform.com Jul
+ * 22, 2010
+ */
+public class TestMessageFilter extends BaseMailTestCase {
+
+  public TestMessageFilter() throws Exception {
+    super();
+  }
+
+  public void testGetStatement() throws Exception {
+    MessageFilter filter = new MessageFilter("message filter");
+    filter.setAccountPath("/users/root");
+    StringBuilder sb = new StringBuilder("/jcr:root/users/root//element(*,exo:message)");
+    assertEquals(sb.toString().trim(), filter.getStatement().trim());
+    
+    filter.setText("hanoi");
+    assertTrue(filter.getStatement().trim().contains("jcr:contains(., 'hanoi')"));
+    filter.setExcludeFolders(new String[] {"Draft"});
+    assertTrue(filter.getStatement().trim().contains("@exo:folders!='Draft'"));
+    filter.setFolder(new String[] {"inbox"});
+    assertTrue(filter.getStatement().trim().contains("fn:upper-case(@exo:folders)='INBOX'"));
+    filter.setTag(new String[] {"Gmail"});
+    assertTrue(filter.getStatement().trim().contains("fn:upper-case(@exo:tags)='GMAIL'"));
+    filter.setFrom("John");
+    assertTrue(filter.getStatement().trim().contains("jcr:like(fn:upper-case(@exo:from), '%JOHN%'"));
+    filter.setTo("Mary");
+    assertTrue(filter.getStatement().trim().contains("jcr:like(fn:upper-case(@exo:to), '%MARY%'"));
+    filter.setSubject("Test");
+    assertTrue(filter.getStatement().trim().contains("jcr:contains(@exo:subject, 'Test'"));
+    filter.setBody("Body");
+    assertTrue(filter.getStatement().trim().contains("jcr:contains(@exo:body, '" + Utils.encodeJCRTextSearch("Body") + "')"));
+    
+    filter.setPriority(1);
+    assertTrue(filter.getStatement().trim().contains("@exo:priority = 1"));
+    filter.setHasAttach(true);
+    assertTrue(filter.getStatement().trim().contains("@exo:hasAttach = 'true'"));
+    filter.setHasStar(true);
+    assertTrue(filter.getStatement().trim().contains("@exo:star = 'true'"));
+    
+    Calendar calendar = Calendar.getInstance();
+    filter.setFromDate(calendar);
+    assertTrue(filter.getStatement().trim().contains("@exo:receivedDate >= xs:dateTime('" + ISO8601.format(calendar) + "')"));
+    
+    filter.setToDate(calendar);
+    assertTrue(filter.getStatement().trim().contains("@exo:receivedDate <= xs:dateTime('" + ISO8601.format(calendar) + "')"));
+    
+    // guard from NPE
+    filter.setFrom(null);
+    filter.setTo(null);
+    filter.setOrderBy(null);
+    filter.setExcludeFolders(new String[] {(String) null});
+    filter.setFolder(new String[] {(String) null});
+    filter.setTag(new String[] {(String) null});
+    filter.setSubject(null);
+    filter.setBody(null);
+    filter.setFromDate(null);
+    filter.setToDate(null);
+    filter.getStatement();
+    
+    
+    
+  }
+}
Index: eXoApplication/mail/service/src/main/java/org/exoplatform/mail/service/MessageFilter.java
===================================================================
--- eXoApplication/mail/service/src/main/java/org/exoplatform/mail/service/MessageFilter.java	(revision 49585)
+++ eXoApplication/mail/service/src/main/java/org/exoplatform/mail/service/MessageFilter.java	(working copy)
@@ -165,7 +165,7 @@
   
   public boolean hasStructure() { return hasStructure_ ; }
   public void setHasStructure(boolean hasStructure) { this.hasStructure_ = hasStructure ; }
-  
+    
   public String getStatement() throws Exception{
     StringBuffer queryString = new StringBuffer("/jcr:root" + accountPath_ + "//element(*,exo:message)");
     boolean hasConjuntion = false ;
@@ -180,8 +180,12 @@
       if(hasConjuntion) stringBuffer.append(" and (") ;
       else stringBuffer.append("(") ;    
       for(int i = 0; i < excludeFolders_.length; i ++) {
-        if(i == 0) stringBuffer.append("@exo:folders!='" + excludeFolders_[i] +"'") ;
-        else stringBuffer.append(" and @exo:folders!='" + excludeFolders_[i] +"'") ;
+        if (excludeFolders_[i] != null && excludeFolders_[i].trim().length() > 0) {
+          if (i == 0)
+            stringBuffer.append("@exo:folders!='" + excludeFolders_[i] + "'");
+          else
+            stringBuffer.append(" and @exo:folders!='" + excludeFolders_[i] + "'");
+        }
       }
       stringBuffer.append(")") ;
       hasConjuntion = true ;
@@ -191,8 +195,13 @@
       if(hasConjuntion) stringBuffer.append(" and (") ;
       else stringBuffer.append("(") ;    
       for(int i = 0; i < folders_.length; i ++) {
-        if(i == 0) stringBuffer.append("@exo:folders='" + folders_[i] +"'") ;
-        else stringBuffer.append(" or @exo:folders='" + folders_[i] +"'") ;
+        if (folders_[i] != null && folders_[i].trim().length() > 0) {
+          if (i == 0)
+            stringBuffer.append("fn:upper-case(@exo:folders)='" + folders_[i].toUpperCase() + "'");
+          else
+            stringBuffer.append(" or fn:upper-case(@exo:folders)='" + folders_[i].toUpperCase()
+                + "'");
+        }
       }
       stringBuffer.append(")") ;
       hasConjuntion = true ;
@@ -202,8 +211,12 @@
       if(hasConjuntion) stringBuffer.append(" and (") ;
       else stringBuffer.append("(") ;
       for(int i = 0; i < tags_.length; i ++) {
-        if(i == 0) stringBuffer.append("@exo:tags='" + tags_[i] +"'") ;
-        else stringBuffer.append(" or @exo:tags='" + tags_[i] +"'") ;
+        if (tags_[i] != null && tags_[i].trim().length() > 0) {
+          if (i == 0)
+            stringBuffer.append("fn:upper-case(@exo:tags)='" + tags_[i].toUpperCase() + "'");
+          else
+            stringBuffer.append(" or fn:upper-case(@exo:tags)='" + tags_[i].toUpperCase() + "'");
+        }
       }
       stringBuffer.append(")") ;
       hasConjuntion = true ;
@@ -214,22 +227,22 @@
       else stringBuffer.append("(") ;
       switch (getFromCondition()) {
         case Utils.CONDITION_CONTAIN :
-          stringBuffer.append(" jcr:like(@exo:from, '%" + from_ + "%')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:from), '%" + from_.toUpperCase() + "%')") ;
           break;
         case Utils.CONDITION_NOT_CONTAIN :
-          stringBuffer.append(" fn:not(jcr:like(@exo:from, '%" + from_ + "%'))") ;
+          stringBuffer.append(" fn:not(jcr:like(fn:upper-case(@exo:from), '%" + from_.toUpperCase() + "%'))") ;
           break;
         case Utils.CONDITION_IS :
-          stringBuffer.append(" @exo:from = '" + from_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:from) = '" + from_.toUpperCase() + "'") ;
           break ;
         case Utils.CONDITION_NOT_IS :
-          stringBuffer.append(" @exo:from != '" + from_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:from) != '" + from_.toUpperCase() + "'") ;
           break;
         case Utils.CONDITION_STARTS_WITH :
-          stringBuffer.append(" jcr:like(@exo:from, '" + from_ + "%')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:from), '" + from_.toUpperCase() + "%')") ;
           break;
         case Utils.CONDITION_ENDS_WITH :
-          stringBuffer.append(" jcr:like(@exo:from, '%" + from_ + "')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:from), '%" + from_.toUpperCase() + "')") ;
           break;
       }
       stringBuffer.append(")") ;
@@ -241,22 +254,22 @@
       else stringBuffer.append("(") ;
       switch (getToCondition()) {
         case Utils.CONDITION_CONTAIN :
-          stringBuffer.append(" jcr:like(@exo:to, '%" + to_ + "%')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:to), '%" + to_.toUpperCase() + "%')") ;
           break;
         case Utils.CONDITION_NOT_CONTAIN :
-          stringBuffer.append(" fn:not(jcr:like(@exo:to, '%" + to_ + "%'))") ;
+          stringBuffer.append(" fn:not(jcr:like(fn:upper-case(@exo:to), '%" + to_.toUpperCase() + "%'))") ;
           break;
         case Utils.CONDITION_IS :
-          stringBuffer.append(" @exo:to = '" + to_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:to) = '" + to_.toUpperCase() + "'") ;
           break ;
         case Utils.CONDITION_NOT_IS :
-          stringBuffer.append(" @exo:to != '" + to_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:to) != '" + to_.toUpperCase() + "'") ;
           break;
         case Utils.CONDITION_STARTS_WITH :
-          stringBuffer.append(" jcr:like(@exo:to, '" + to_ + "%')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:to), '" + to_.toUpperCase() + "%')") ;
           break;
         case Utils.CONDITION_ENDS_WITH :
-          stringBuffer.append(" jcr:like(@exo:to, '%" + to_ + "')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:to), '%" + to_.toUpperCase() + "')") ;
           break;
       }
       stringBuffer.append(")") ;
@@ -276,16 +289,16 @@
           stringBuffer.append(" fn:not(jcr:contains(@exo:subject, '" + subject_ + "'))") ;
           break;
         case Utils.CONDITION_IS :
-          stringBuffer.append(" @exo:subject = '" + subject_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:subject) = '" + subject_.toUpperCase() + "'") ;
           break ;
         case Utils.CONDITION_NOT_IS :
-          stringBuffer.append(" @exo:subject != '" + subject_ + "'") ;
+          stringBuffer.append(" fn:upper-case(@exo:subject) != '" + subject_.toUpperCase() + "'") ;
           break;
         case Utils.CONDITION_STARTS_WITH :
-          stringBuffer.append(" jcr:like(@exo:subject, '" + subject_ + "%')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:subject), '" + subject_.toUpperCase() + "%')") ;
           break;
         case Utils.CONDITION_ENDS_WITH :
-          stringBuffer.append(" jcr:like(@exo:subject, '%" + subject_ + "')") ;
+          stringBuffer.append(" jcr:like(fn:upper-case(@exo:subject), '%" + subject_.toUpperCase() + "')") ;
           break;
       }
       stringBuffer.append(")") ;
