Index: eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/impl/XMPPSessionImpl.java
===================================================================
--- eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/impl/XMPPSessionImpl.java	(revision 64627)
+++ eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/impl/XMPPSessionImpl.java	(working copy)
@@ -17,8 +17,6 @@
 package org.exoplatform.services.xmpp.connection.impl;
 
 import java.io.File;
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
 import java.text.DateFormat;
 import java.text.MessageFormat;
 import java.text.SimpleDateFormat;
@@ -30,6 +28,7 @@
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
@@ -37,9 +36,7 @@
 
 import javax.jcr.RepositoryException;
 
-import org.apache.commons.lang.time.DateFormatUtils;
 import org.apache.commons.logging.Log;
-import org.apache.poi.hdf.event.EventBridge;
 import org.exoplatform.container.ExoContainer;
 import org.exoplatform.container.ExoContainerContext;
 import org.exoplatform.services.jcr.config.RepositoryConfigurationException;
@@ -53,7 +50,6 @@
 import org.exoplatform.services.xmpp.bean.ContactBean;
 import org.exoplatform.services.xmpp.bean.DeclineBean;
 import org.exoplatform.services.xmpp.bean.EventsBean;
-import org.exoplatform.services.xmpp.bean.FieldBean;
 import org.exoplatform.services.xmpp.bean.FileTransferEventBean;
 import org.exoplatform.services.xmpp.bean.FileTransferRequestBean;
 import org.exoplatform.services.xmpp.bean.FileTransferResponseBean;
@@ -81,7 +77,6 @@
 import org.exoplatform.services.xmpp.userinfo.UserInfo;
 import org.exoplatform.services.xmpp.userinfo.UserInfoService;
 import org.exoplatform.services.xmpp.util.CometdChannels;
-import org.exoplatform.services.xmpp.util.HistoryUtils;
 import org.exoplatform.services.xmpp.util.MUCConstants;
 import org.exoplatform.services.xmpp.util.PresenceUtil;
 import org.exoplatform.services.xmpp.util.SearchFormFields;
@@ -105,7 +100,6 @@
 import org.jivesoftware.smack.packet.IQ;
 import org.jivesoftware.smack.packet.Message;
 import org.jivesoftware.smack.packet.Packet;
-import org.jivesoftware.smack.packet.PacketExtension;
 import org.jivesoftware.smack.packet.Presence;
 import org.jivesoftware.smack.packet.XMPPError;
 import org.jivesoftware.smack.packet.Presence.Type;
@@ -131,7 +125,6 @@
 import org.jivesoftware.smackx.packet.DiscoverInfo;
 import org.jivesoftware.smackx.packet.DiscoverItems;
 import org.jivesoftware.smackx.packet.MUCUser;
-import org.jivesoftware.smackx.packet.Time;
 import org.jivesoftware.smackx.packet.DiscoverInfo.Identity;
 import org.jivesoftware.smackx.packet.DiscoverItems.Item;
 import org.jivesoftware.smackx.packet.MUCUser.Invite;
@@ -225,6 +218,7 @@
   
   private final DateFormat dateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");
   
+  private Map<String, EventsBean> messageMap;
   
   /**
    * It's value not from spec. I add it myself for sending real JID of room to UI client.
@@ -256,7 +250,7 @@
         log.info("Client '" + username + "' logged in.");
       multiUserChatManager = new MultiUserChatManager();
       fileTransferManager = new FileTransferManager(connection_);
-
+      messageMap = Collections.synchronizedMap(new LinkedHashMap<String, EventsBean>());
       fileTransferManager.addFileTransferListener(new FileTransferListener() {
         public void fileTransferRequest(FileTransferRequest request) {
           try {
@@ -321,7 +315,8 @@
             }
             
             JsonValue json = generatorImpl.createJsonObject(eventsBean);
-            delegate_.sendMessage(username_, CometdChannels.MESSAGE, json.toString(), null);
+            messageMap.put(packet.getPacketID(), eventsBean);
+            delegate_.sendMessage(username_, CometdChannels.MESSAGE, json.toString(), null);          
             if (log.isDebugEnabled())
               log.debug(json.toString());
           } catch (Exception e) {
@@ -378,7 +373,9 @@
           try {
             MUCPacketBean bean = new MUCPacketBean();
             bean.setAction(MUCConstants.Action.INVITE);
-            bean.setInvite(new InviteBean(inviter,
+            UserInfo userInfo = getUserInfo(inviter.split("@")[0]);
+            String inviterName = userInfo.getFirstName() + " " + userInfo.getLastName();
+            bean.setInvite(new InviteBean(inviter, inviterName,
                                           TransformUtils.messageToBean(message),
                                           password,
                                           reason,
@@ -598,8 +595,12 @@
       log.debug("finish initialize for the user:'" + username + "'.");
   }
   
+  public Map<String, EventsBean> getMessageMap() {
+    return messageMap;
+  }
   
   
+  
 
   /**
    * {@inheritDoc}
@@ -2179,5 +2180,19 @@
     }
     return roomJID;
   }
+  
+  // send a delayed message from messageMap to Cometd
+  public void sendMessageToCometd(EventsBean eventsBean) {
+    try {
+      JsonGeneratorImpl generatorImpl = new JsonGeneratorImpl();
+      JsonValue json = generatorImpl.createJsonObject(eventsBean);
+      delegate_.sendMessage(username_, CometdChannels.MESSAGE, json.toString(), null);
+      
+      if (log.isDebugEnabled())
+        log.debug(json.toString());
+    } catch (Exception e) {
+        e.printStackTrace();
+    }
+  }
 
 }
Index: eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/XMPPSession.java
===================================================================
--- eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/XMPPSession.java	(revision 64627)
+++ eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/connection/XMPPSession.java	(working copy)
@@ -18,10 +18,13 @@
 
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 
 import org.exoplatform.services.xmpp.bean.ConfigRoomBean;
+import org.exoplatform.services.xmpp.bean.EventsBean;
 import org.exoplatform.services.xmpp.bean.FormBean;
 import org.exoplatform.services.xmpp.bean.FullRoomInfoBean;
+import org.exoplatform.services.xmpp.bean.MessageBean;
 import org.exoplatform.services.xmpp.ext.transport.Transport;
 import org.exoplatform.services.xmpp.history.HistoricalMessage;
 import org.exoplatform.services.xmpp.history.Interlocutor;
@@ -482,4 +485,8 @@
   RoomInfo getRoomInfo(String room) throws XMPPException;
 
   void addFullUserNames(String userName, String fullUserName);
+  
+  public Map<String, EventsBean> getMessageMap();
+  
+  public void sendMessageToCometd(EventsBean eventsBean);
 }
Index: eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/bean/InviteBean.java
===================================================================
--- eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/bean/InviteBean.java	(revision 64627)
+++ eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/bean/InviteBean.java	(working copy)
@@ -34,6 +34,11 @@
    * 
    */
   private String      inviter;
+  
+  /**
+   * 
+   */
+  private String inviterName;
 
   /**
    * 
@@ -71,6 +76,16 @@
     this.reason = reason;
     this.room = room;
   }
+  
+  public InviteBean(String inviter, String inviterName, MessageBean message, String password, String reason, String room) {
+    super();
+    this.inviter = inviter;
+    this.inviterName = inviterName;
+    this.message = message;
+    this.password = password;
+    this.reason = reason;
+    this.room = room;
+  }
 
   /**
    * @return the room
@@ -99,6 +114,14 @@
   public void setInviter(String inviter) {
     this.inviter = inviter;
   }
+  
+  public String getInviterName() {
+    return inviterName;
+  }
+  
+  public void setInviterName(String inviterName) {
+    this.inviterName = inviterName;
+  }
 
   /**
    * @return the reason
Index: eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/rest/RESTXMPPService.java
===================================================================
--- eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/rest/RESTXMPPService.java	(revision 64627)
+++ eXoApplication/chat/service/src/main/java/org/exoplatform/services/xmpp/rest/RESTXMPPService.java	(working copy)
@@ -28,11 +28,13 @@
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.ResourceBundle;
 import java.util.UUID;
+import java.util.Map.Entry;
 
 import org.apache.commons.logging.Log;
 import org.exoplatform.common.http.HTTPMethods;
@@ -55,6 +57,7 @@
 import org.exoplatform.services.security.ConversationState;
 import org.exoplatform.services.xmpp.bean.ConfigRoomBean;
 import org.exoplatform.services.xmpp.bean.ContactBean;
+import org.exoplatform.services.xmpp.bean.EventsBean;
 import org.exoplatform.services.xmpp.bean.FormBean;
 import org.exoplatform.services.xmpp.bean.HostedRoomBean;
 import org.exoplatform.services.xmpp.bean.InitInfoBean;
@@ -2129,6 +2132,49 @@
                              .build();
     }
   }
-
-
+  
+  /**
+   * CS-4411: Lost messages when changing navigation
+   * use to confirm that user has received message
+   * @param username
+   * @param msgid
+   * @return
+   */
+  @HTTPMethod(HTTPMethods.GET)
+  @URITemplate("/xmpp/chatconfirm/{username}/{msgid}/") 
+  public Response chatConfirm (@URIParam("username") String username,
+                               @URIParam("msgid") String msgid) {
+    XMPPSession session = messenger.getSession(username);
+    Map<String, EventsBean> messageMap = session.getMessageMap();
+    messageMap.remove(msgid);
+    return Response.Builder.ok().build();
+  }
+  
+  /**
+   * CS-4411: Lost messages when changing navigation
+   * send all delayed message to cometd
+   * @param username
+   * @return
+   */
+  @HTTPMethod(HTTPMethods.GET)
+  @URITemplate("/xmpp/delayedmessages/{username}/") 
+  public Response loadDelayedMessages (@URIParam("username") String username) {
+    XMPPSession session = messenger.getSession(username);
+    Map<String, EventsBean> messageMap = session.getMessageMap();
+    Iterator<Entry<String, EventsBean>> iter = messageMap.entrySet().iterator();
+    /*synchronized (messageMap) {
+      while(iter.hasNext()) {
+        Map.Entry<String, EventsBean> entry = (Map.Entry<String, EventsBean>)iter.next();
+        EventsBean message = (EventsBean)entry.getValue();
+        session.sendMessageToCometd(message);
+        iter.remove();
+      }
+    }*/
+    while(iter.hasNext()) {
+      Map.Entry<String, EventsBean> entry = (Map.Entry<String, EventsBean>)iter.next();
+      EventsBean message = (EventsBean)entry.getValue();
+      session.sendMessageToCometd(message);
+    }
+    return Response.Builder.ok().build();
+  }
 }
Index: eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js
===================================================================
--- eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js	(revision 64627)
+++ eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js	(working copy)
@@ -688,4 +688,24 @@
   request.process() ;
 };
 
+/**
+ * Use to send notification to server that user has received chat message
+ */
+XMPPCommunicator.prototype.chatConfirm = function(username, msgId,  transportName, handler) {
+  var url = this.SERVICE_URL + '/' + transportName + '/chatconfirm/' + username + '/' + msgId;
+  var request = new eXo.portal.AjaxRequest('GET', url, null);
+  this.initRequest(request, handler);
+  request.process();
+}
+
+/**
+ * Call to push all delayed messages from server to cometd
+ */
+XMPPCommunicator.prototype.loadDelayedMessages = function(username, transportName, handler) {
+  var url = this.SERVICE_URL + '/' + transportName + '/delayedmessages/' + username;
+  var request = new eXo.portal.AjaxRequest('GET', url, null);
+  this.initRequest(request, handler);
+  request.process();
+}
+
 eXo.communication.chat.core.XMPPCommunicator = new XMPPCommunicator();
Index: eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js
===================================================================
--- eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js	(revision 64627)
+++ eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js	(working copy)
@@ -978,42 +978,6 @@
     }
   }
   
-  if (visible)
-  {
-    var activeTabControl = thys.getActiveTabControl();
-    if (activeTabControl) {
-      activeTabControl.updateUnreadMessage();
-      var historyStatus = activeTabControl.tabPaneNode.historyStatus;
-      if (!historyStatus) historyStatus = thys.CURRENT_CONVERSATION_MESSAGE;
-      var endDate = new Date();
-      var startDate = new Date(endDate);
-      switch (historyStatus) {
-        case thys.CURRENT_CONVERSATION_MESSAGE:
-          startDate = new Date(activeTabControl.tabPaneNode.startTime);
-          break;
-        case thys.THIS_WEEK_MESSAGE:
-          startDate.setDate(endDate.getDate() - endDate.getDay());
-          break;
-        case thys.LAST_30_DAY_MESSAGE:
-          startDate.setDate(endDate.getDate() - 30);
-          break;
-        case thys.BEGINNING_MESSAGE:
-          startDate = false;
-          break;
-      }
-      if (startDate) {
-        startDate.setHours(0);
-        startDate.setMinutes(0);
-        startDate.setSeconds(0);
-        startDate.setMilliseconds(1);
-        startDate = startDate.getTime();
-        endDate = endDate.getTime();
-      }
-      var targetPerson = activeTabControl.tabId.targetPerson;
-      targetPerson = targetPerson.substr(0, targetPerson.indexOf('@'));
-      thys.UIMainChatWindow.jabberGetMessageHistory(targetPerson, startDate, endDate, activeTabControl.isGroupChat);      
-    }
-  }
   thys.setVisible(visible, null, true);
   thys._isOnLoading = false;
 };
Index: eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js
===================================================================
--- eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js	(revision 64627)
+++ eXoApplication/chat/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js	(working copy)
@@ -966,6 +966,10 @@
           var roomName = inviteInfo.room;
           roomName = roomName.substr(0, roomName.indexOf('@'));
           var fullName = eXo.communication.chat.webui.UIChatWindow.fullNameMap[inviteInfo.inviter];
+          if (fullName == null) {
+            fullName = inviteInfo.inviterName;
+            eXo.communication.chat.webui.UIChatWindow.fullNameMap[inviteInfo.inviter] = fullName;
+          }
           //var msgBuf = inviteInfo.inviter + ' invite you join to room: "' + roomName + '"';
           var msgBuf = this.ResourceBundle.chat_message_room_invite_to_join.replace('{0}', fullName);
           msgBuf = msgBuf.replace('{1}', roomName);
@@ -1111,6 +1115,7 @@
   //userNameNode.innerHTML = this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP];
   var userStatusIconNode = DOMUtil.findAncestorByTagName(this.statusIconNode, 'div');
   window.jsconsole.warn('User changed status: ' + this.userStatus + ' -> ' + status);
+  var previousStatus = this.userStatus;
   this.userStatus = status;
   var presenceData = {};
   presenceData.from = this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP] + '@' + this.serverInfo.mainServiceName;
@@ -1144,6 +1149,10 @@
       this.AdvancedDOMEvent.addEventListener(window, 'unload', this.destroyAll, false);
       this.preChangeStatus(this.ONLINE_STATUS, true);
       eXo.communication.chat.webui.UIStateManager.init(this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP]);
+      // push delayed messages from xmppsession to cometd
+      if (previousStatus != this.OFFLINE_STATUS) {
+        eXo.communication.chat.webui.UIMainChatWindow.jabberLoadDelayedMessages(this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP]);
+      }
       break;
     case this.OFFLINE_STATUS:
       //this.unsubscribeCometdTopics();
@@ -1415,6 +1424,8 @@
           }
           messages[lastSenderPoint].body = buffer;
           this.UIChatWindow.displayMessage(messages[lastSenderPoint].from, messages[lastSenderPoint], isGroupChat);
+          var username = messages[lastSenderPoint].to.split('@')[0];
+          eXo.communication.chat.webui.UIMainChatWindow.jabberChatConfirm(username, messages[lastSenderPoint].id);
           lastSenderPoint = i;
           lastSender = msgObj.from;
         }
@@ -1426,6 +1437,8 @@
         isGroupChat = true;
       }
       this.UIChatWindow.displayMessage(msgObj.from, msgObj, isGroupChat);
+      var username = msgObj.to.split('@')[0];
+      eXo.communication.chat.webui.UIMainChatWindow.jabberChatConfirm(username, msgObj.id);
     }
   } catch(e) {
     window.jsconsole.error('Look up error! developer');
@@ -1826,6 +1839,17 @@
   this.activeAction = this.LOAD_JS_RESOURCE_BUNDLE;
   this.XMPPCommunicator.loadJsResourceBundle(locale, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
 };
+
+UIMainChatWindow.prototype.jabberChatConfirm = function(toUser, msgId) {
+  this.activeAction = "Confirm received chat message";
+  this.XMPPCommunicator.chatConfirm(toUser, msgId, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
+};
+
+UIMainChatWindow.prototype.jabberLoadDelayedMessages = function(username) {
+  this.activeAction = "Load delayed messages";
+  this.XMPPCommunicator.loadDelayedMessages(username, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
+};
+
 // -/-
 
 /**
Index: eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js
===================================================================
--- eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js	(revision 64627)
+++ eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/core/XMPPCommunicator.js	(working copy)
@@ -688,4 +688,24 @@
   request.process() ;
 };
 
+/**
+ * Use to send notification to server that user has received chat message
+ */
+XMPPCommunicator.prototype.chatConfirm = function(username, msgId, transportName, handler) {
+  var url = this.SERVICE_URL + '/' + transportName + '/chatconfirm/' + username + '/' + msgId;
+  var request = new eXo.portal.AjaxRequest('GET', url, null);
+  this.initRequest(request, handler);
+  request.process();
+}
+
+/**
+ * Call to push all delayed messages from server to cometd
+ */
+XMPPCommunicator.prototype.loadDelayedMessages = function(username, transportName, handler) {
+  var url = this.SERVICE_URL + '/' + transportName + '/delayedmessages/' + username;
+  var request = new eXo.portal.AjaxRequest('GET', url, null);
+  this.initRequest(request, handler);
+  request.process();
+}
+
 eXo.communication.chatbar.core.XMPPCommunicator = new XMPPCommunicator();
Index: eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js
===================================================================
--- eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js	(revision 64627)
+++ eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIChatWindow.js	(working copy)
@@ -974,42 +974,6 @@
       thys.focusTab(activeTabId, true);
     }
   }
-
-  if (visible) {
-    var activeTabControl = thys.getActiveTabControl();
-    if (activeTabControl) {
-      activeTabControl.updateUnreadMessage();
-      var historyStatus = activeTabControl.tabPaneNode.historyStatus;
-      if (!historyStatus) historyStatus = thys.CURRENT_CONVERSATION_MESSAGE;
-      var endDate = new Date();
-      var startDate = new Date(endDate);
-      switch (historyStatus) {
-        case thys.CURRENT_CONVERSATION_MESSAGE:
-          startDate = new Date(activeTabControl.tabPaneNode.startTime);
-          break;
-        case thys.THIS_WEEK_MESSAGE:
-          startDate.setDate(endDate.getDate() - endDate.getDay());
-          break;
-        case thys.LAST_30_DAY_MESSAGE:
-          startDate.setDate(endDate.getDate() - 30);
-          break;
-        case thys.BEGINNING_MESSAGE:
-          startDate = false;
-          break;
-      }
-      if (startDate) {
-        startDate.setHours(0);
-        startDate.setMinutes(0);
-        startDate.setSeconds(0);
-        startDate.setMilliseconds(1);
-        startDate = startDate.getTime();
-        endDate = endDate.getTime();
-      }
-      var targetPerson = activeTabControl.tabId.targetPerson;
-      targetPerson = targetPerson.substr(0, targetPerson.indexOf('@'));
-      thys.UIMainChatWindow.jabberGetMessageHistory(targetPerson, startDate, endDate, activeTabControl.isGroupChat);      
-    }
-  }	
   
   thys.setVisible(visible, null, true);
   thys._isOnLoading = false;
Index: eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js
===================================================================
--- eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js	(revision 64627)
+++ eXoApplication/chatbar/webapp/src/main/webapp/javascript/eXo/communication/chat/webui/UIMainChatWindow.js	(working copy)
@@ -1026,6 +1026,10 @@
           var roomName = inviteInfo.room;
           roomName = roomName.substr(0, roomName.indexOf('@'));
           var fullName = eXo.communication.chatbar.webui.UIChatWindow.fullNameMap[inviteInfo.inviter];
+          if (fullName == null) {
+            fullName = inviteInfo.inviterName;
+            eXo.communication.chatbar.webui.UIChatWindow.fullNameMap[inviteInfo.inviter] = fullName;
+          }
           //var msgBuf = inviteInfo.inviter + ' invite you join to room: "' + roomName + '"';
           var msgBuf = this.ResourceBundle.chat_message_room_invite_to_join.replace('{0}', fullName);
           msgBuf = msgBuf.replace('{1}', roomName);
@@ -1171,6 +1175,7 @@
   //userNameNode.innerHTML = this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP];
   var userStatusIconNode = DOMUtil.findAncestorByTagName(this.statusIconNode, 'div');
   window.jsconsole.warn('User changed status: ' + this.userStatus + ' -> ' + status);
+  var previousStatus = this.userStatus;
   this.userStatus = status;
   var presenceData = {};
   presenceData.from = this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP] + '@' + this.serverInfo.mainServiceName;
@@ -1204,6 +1209,10 @@
       this.AdvancedDOMEvent.addEventListener(window, 'unload', this.destroyAll, false);
       this.preChangeStatus(this.ONLINE_STATUS, true);
       eXo.communication.chatbar.webui.UIStateManager.init(this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP]);
+      // push delayed messages from xmppsession to cometd
+      if (previousStatus != this.OFFLINE_STATUS) {
+        eXo.communication.chatbar.webui.UIMainChatWindow.jabberLoadDelayedMessages(this.userNames[this.XMPPCommunicator.TRANSPORT_XMPP]);
+      }
       break;
     case this.OFFLINE_STATUS:
       //this.unsubscribeCometdTopics();
@@ -1479,6 +1488,8 @@
           }
           messages[lastSenderPoint].body = buffer;
           this.UIChatWindow.displayMessage(messages[lastSenderPoint].from, messages[lastSenderPoint], isGroupChat);
+          var username = messages[lastSenderPoint].to.split('@')[0];
+          eXo.communication.chatbar.webui.UIMainChatWindow.jabberChatConfirm(username, messages[lastSenderPoint].id);
           lastSenderPoint = i;
           lastSender = msgObj.from;
         }
@@ -1490,6 +1501,8 @@
         isGroupChat = true;
       }
       this.UIChatWindow.displayMessage(msgObj.from, msgObj, isGroupChat);
+      var username = msgObj.to.split('@')[0];
+      eXo.communication.chatbar.webui.UIMainChatWindow.jabberChatConfirm(username, msgObj.id);
     }
   } catch(e) {
     window.jsconsole.error('Look up error! developer');
@@ -1891,6 +1904,16 @@
   this.XMPPCommunicator.loadJsResourceBundle(locale, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
 };
 
+UIMainChatWindow.prototype.jabberChatConfirm = function(toUser, msgId) {
+  this.activeAction = "Confirm received chat message";
+  this.XMPPCommunicator.chatConfirm(toUser, msgId, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
+};
+
+UIMainChatWindow.prototype.jabberLoadDelayedMessages = function(username) {
+  this.activeAction = "Load delayed messages";
+  this.XMPPCommunicator.loadDelayedMessages(username, this.XMPPCommunicator.TRANSPORT_XMPP, this.getAjaxHandler());
+};
+
 // -/-
 
 /**
