<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs author="eXoPlatform"
		title="Upcoming events"
		directory_title="Upcoming events"
		title_url="http://www.exoplatform.org"
		description="Upcoming events list."
		thumbnail="/csResources/gadgets/events/skin/thumb.png"
		height="235">
		<Locale messages="/csResources/gadgets/events/locale/default.xml" />
		<Locale lang="ar" messages="/csResources/gadgets/events/locale/ar.xml" language_direction="rtl"/>
		<Locale lang="fr" messages="/csResources/gadgets/events/locale/fr.xml" />
		<Locale lang="vi" messages="/csResources/gadgets/events/locale/vi.xml" />
		<Require feature="setprefs"/>
	</ModulePrefs>
	<UserPref name="url" display_name="Base url" datatype="string" default_value="/portal/rest/private/cs/calendar/upcoming" required="true"/>
	<UserPref name="limit" display_name="Item per a page" default_value="10" datatype="string"/>  
	<UserPref name="timeformat" display_name="Time format" default_value="AM/PM" datatype="enum" >
    <EnumValue value="AM/PM" />
    <EnumValue value="24h" />	
  </UserPref>	 
  <Content type="html">
    <![CDATA[  
      <div class="Container">
				<div id="container"><span></span></div>
				<div class="ShowAll"><a id="showall" href="/calendar" target="top">__MSG_showall__</a></div>
			</div>
			<div id="detail" style="display:none;"><span></span></div>
      <style type="text/css">
      .Container {
				margin: auto;				
				font-size: 12px;
			}
			.Container a {
				text-decoration:none;
			}
			.Container .ShowAll{
				text-align:right;
			}
			
			.Container li.EventItem {
				padding: 3px 0px 3px 20px;
				background: url(/csResources/gadgets/events/skin/event.png) no-repeat top left;
			}
			
			.Container ul {
				margin: 0px;
				padding-left: 10px;
				list-style-type:none;
			}
      </style>
  
      <script type="text/javascript">
        var data = [
          {
            time: "10pm",
            summary: "Meeting with PM",
            link: "http://exoplatform.com"
          },					
          {
            time: "11pm",
            summary: "Meeting with Customer",
            link: "http://exoplatform.com"
          }
        ]
				function DateTimeFormater(){
				};
				DateTimeFormater.prototype.masks = {
					"default":      "ddd mmm dd yyyy HH:MM:ss",
					shortDate:      "m/d/yy",
					mediumDate:     "mmm d, yyyy",
					longDate:       "mmmm d, yyyy",
					fullDate:       "dddd, mmmm d, yyyy",
					shortTime:      "h:MM TT",
					mediumTime:     "h:MM:ss TT",
					longTime:       "h:MM:ss TT Z",
					isoDate:        "yyyy-mm-dd",
					isoTime:        "HH:MM:ss",
					isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
					isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
				};
				DateTimeFormater.prototype.token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g;
				DateTimeFormater.prototype.timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
				DateTimeFormater.prototype.timezoneClip = /[^-+\dA-Z]/g;
				DateTimeFormater.prototype.pad = function(val, len) {
					val = String(val);
					len = len || 2;
					while (val.length < len) val = "0" + val;
					return val;
				};
				
				DateTimeFormater.prototype.i18n = {
					dayNames: [
						"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
						"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
					],
					monthNames: [
						"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
						"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
					]
				};
				
				DateTimeFormater.prototype.format = function (date, mask, utc) {
					var dF = DateTimeFormater;
				
					// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
					if (arguments.length == 1 && (typeof date == "string" || date instanceof String) && !/\d/.test(date)) {
						mask = date;
						date = undefined;
					}
				
					// Passing date through Date applies Date.parse, if necessary
					date = date ? new Date(date) : new Date();
					if (isNaN(date)) throw new SyntaxError("invalid date");
				
					mask = String(dF.masks[mask] || mask || dF.masks["default"]);
				
					// Allow setting the utc argument via the mask
					if (mask.slice(0, 4) == "UTC:") {
						mask = mask.slice(4);
						utc = true;
					}
				
					var	_ = utc ? "getUTC" : "get",
						d = date[_ + "Date"](),
						D = date[_ + "Day"](),
						m = date[_ + "Month"](),
						y = date[_ + "FullYear"](),
						H = date[_ + "Hours"](),
						M = date[_ + "Minutes"](),
						s = date[_ + "Seconds"](),
						L = date[_ + "Milliseconds"](),
						o = utc ? 0 : date.getTimezoneOffset(),
						flags = {
							d:    d,
							dd:   dF.pad(d),
							ddd:  dF.i18n.dayNames[D],
							dddd: dF.i18n.dayNames[D + 7],
							m:    m + 1,
							mm:   dF.pad(m + 1),
							mmm:  dF.i18n.monthNames[m],
							mmmm: dF.i18n.monthNames[m + 12],
							yy:   String(y).slice(2),
							yyyy: y,
							h:    H % 12 || 12,
							hh:   dF.pad(H % 12 || 12),
							H:    H,
							HH:   dF.pad(H),
							M:    M,
							MM:   dF.pad(M),
							s:    s,
							ss:   dF.pad(s),
							l:    dF.pad(L, 3),
							L:    dF.pad(L > 99 ? Math.round(L / 10) : L),
							t:    H < 12 ? "a"  : "p",
							tt:   H < 12 ? "am" : "pm",
							T:    H < 12 ? "A"  : "P",
							TT:   H < 12 ? "AM" : "PM",
							Z:    utc ? "UTC" : (String(date).match(dF.timezone) || [""]).pop().replace(dF.timezoneClip, ""),
							o:    (o > 0 ? "-" : "+") + dF.pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
							S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
						};
				
					return mask.replace(dF.token, function ($0) {
						return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
					});
				};
				
				DateTimeFormater = new DateTimeFormater();
				
				function getPrefs(){
					var prefs = new gadgets.Prefs();
					var limit = prefs.getString("limit");
					var url   = prefs.getString("url");
					var timeformat  = prefs.getString("timeformat");
					return {
						"limit": limit,
						"url"  : url,
						"timeformat" : timeformat
					}
				}
				function setLink(){					
					var a = document.getElementById("showall");
					a.href = "http://localhost:8080/portal/private/classic/calendar";
				}
				function createRequestUrl(){
					var prefs = getPrefs();
					var url = (prefs.url)?prefs.url: "/portal/rest/private/cs/calendar/upcoming" ;
					url +=  "/" + DateTimeFormater.format((new Date()),"yyyymmdd") + "/event";
					url += "?rnd=" + (new Date()).getTime();
					return url;
				}
				function getData(){					 
					var url = createRequestUrl();					
					ajaxAsyncGetRequest(url,render);
				}				
				function render(data){
					if(!data || data.length == 0){
						notify();
						return;
					}
          var cont = document.getElementById("container");
					var prefs = getPrefs();
					var gadgetPref = new gadgets.Prefs();
					var timemask = "h:MM TT";
          var html = '<ul class="EventList">';
					var len = (prefs.limit && (parseInt(prefs.limit) > 0) &&  (parseInt(prefs.limit) < data.length))? prefs.limit:data.length;
					if(prefs.timeformat == "24h") timemask = "HH:MM";
          for(var i = 0 ; i < len; i++){	
            var item = data[i];
						var time = DateTimeFormater.format(new Date(item.fromDateTime.time),timemask);
            html += '<li class="EventItem">' + time + ' : <a href="javascript:void(0);" desc="' + item.description + '" onclick="showDetail(this,\''+ time +'\');">'+ item.summary +'</a></li>';
          }
          html += '</ul>';
          cont.innerHTML = html;
					setLink();
        }
				
				function showDetail(obj,time){
					var gadgetPref = new gadgets.Prefs();
					var detail = document.getElementById("detail");
					var cont = document.getElementById("container").parentNode;
					var html  = '<div class="Summary">' + obj.innerHTML + '</div>';
					if(obj.getAttribute("desc") != "null") html     += '<div class="Descripttion">' + obj.getAttribute("desc") + '</div>';
					html     += '<div class="Time">' + time + '</div>';
					html     += '<div class="Action"><a href="javascript:back();">' + gadgetPref.getMsg("back") +'</a></div>'
					detail.innerHTML = html;
					detail.style.display = "block";
					cont.style.display = "none";
				}
				function back(){
					var detail = document.getElementById("detail");
					var cont = document.getElementById("container").parentNode;
					detail.style.display = "none";
					cont.style.display = "block";
				}
				function onLoadHander(){
					setInterval(getData,5000);
				}
				function ajaxAsyncGetRequest(url, callback) {
					var request =  parent.eXo.core.Browser.createHttpRequest() ;
				  request.open('GET', url, true) ;
				  request.setRequestHeader("Cache-Control", "max-age=86400") ;
				  request.send(null) ;
					request.onreadystatechange = function(){
						if(request.readyState == 4 && request.status == 200){
							callback(gadgets.json.parse(request.responseText).info);
						}
					}					
				}
				function notify(){
					var msg = gadgets.Prefs().getMsg("noevent");
					document.getElementById("container").innerHTML = '<div class="Warning">' + msg + '</div>';
				}
        gadgets.util.registerOnLoadHandler(onLoadHander);
      </script>
    ]]>
  </Content>
</Module>